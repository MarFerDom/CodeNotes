[
  {
    "objectID": "01_Python/built-in.html",
    "href": "01_Python/built-in.html",
    "title": "Built-in functions",
    "section": "",
    "text": "Methods in this page"
  },
  {
    "objectID": "01_Python/built-in.html#for-accessing-attributes",
    "href": "01_Python/built-in.html#for-accessing-attributes",
    "title": "Built-in functions",
    "section": "For accessing attributes",
    "text": "For accessing attributes\n\nProperty\n\nCan be used as a class or a decorator to provide easy “hidden” attributes.\n\nAs a class, the constructor expects to receive functions to get, set and del the attribute along with some documentation\n\nclass myProp:\n    def __init__(self, x=None):\n        self._x = None\n        \n    def _get(self):\n        return self._x*3 # just to show the difference with normal attr\n    \n    def _set(self, x):\n        self._x = x\n        \n    def _del(self, x):\n        self._x = None\n        \n    x = property(_get, _set, _del, \"THE X!\")\n    \nmyp = myProp()\nmyp.x = 3\nprint(myp.__dict__)\nmyp.x\n\n{'_x': 3}\n\n\n9\n\n\nAs a decorator, can make the code more readable. First define the property getter then the = and del overloaders\n\nclass myPropDec:\n    def __init__(self, x=None):\n        self._x = None\n        \n    @property\n    def x(self):\n        return self._x*3 # just to show the difference with normal attr\n    \n    @x.setter\n    def x(self, x):\n        self._x = x\n        \n    @x.deleter\n    def x(self, x):\n        self._x = None\n    \nmyp = myPropDec()\nmyp.x = 3\nprint(myp.__dict__)\nmyp.x\n\n{'_x': 3}\n\n\n9\n\n\n\n\nStaticmethod\n\nCan be used as a class or a decorator to provide easy static methods to classes (no implicit self argument).\n\nAs a class, the staticmethod constructor expects to receive a function.\n\ndef staticTest():\n    print(42)\n    \nclass testStatic:\n    pass\n\ntestStatic.stat = staticmethod(staticTest)\ntestStatic().stat()\ntestStatic.stat()\n\n42\n42\n\n\nAlternatively, if not static, the method uses the object as the first argument implicitly - self - raising an error when called by the class.\n\ndef nonstaticTest(x):\n    print(x)\n    \ntestStatic.nonstatic = nonstaticTest\ntestStatic().nonstatic()\ntry:\n    testStatic.nonstatic()\nexcept TypeError as e:\n    print(f\"TypeError: {e}\")\n\n&lt;__main__.testStatic object&gt;\nTypeError: nonstaticTest() missing 1 required positional argument: 'x'\n\n\nor an error when called by an instance, if it expects no arguments\n\ndef nonstaticTest():\n    print(42)\n    \ntestStatic.nonstatic = nonstaticTest\ntestStatic.nonstatic()\ntry:\n    testStatic().nonstatic()\nexcept TypeError as e:\n    print(f\"TypeError: {e}\")\n\n42\nTypeError: nonstaticTest() takes 0 positional arguments but 1 was given\n\n\nAs a decorator, makes the code cleaner.\n\nclass staticTestClass:\n    \n    @staticmethod\n    def stat():    # does not need self\n        print(42)\n        \nstaticTestClass().stat()\nstaticTestClass.stat()\n\n42\n42\n\n\n\n\nClassmethod\n\nWrapper to define that the method receives the class as an implicit argument, not the instance calling.\n\n\nclass classmethodTestClass:\n    \"\"\"Documentation for classmethodTestClass\"\"\"\n    \n    @classmethod\n    def test(self):\n        print(self.__doc__)\n        \n    def testInst(self):\n        print(self.__doc__)\n        \ntestObj = classmethodTestClass()\ntestObj.test()\ntestObj.testInst()\n\nDocumentation for classmethodTestClass\nDocumentation for classmethodTestClass\n\n\nIf we modify the documentation for the instance object we can see how the self in @classmethod refers to the class.\n\ntestObj.__doc__ = \"\"\"Documentation for an instance of classmethodTestClass\"\"\"\ntestObj.test()\ntestObj.testInst()\n\nDocumentation for classmethodTestClass\nDocumentation for an instance of classmethodTestClass\n\n\nIf we modify the method test for a regular function, the argument will be the implicit self.\n\nclassmethodTestClass.test = lambda self: print(self.__doc__)\ntestObj.test()\n\nDocumentation for an instance of classmethodTestClass\n\n\nFor this reason, to run an instance method within the class, an argument mas be passed.\n\nclassmethodTestClass.test(classmethodTestClass)\nclassmethodTestClass.testInst(classmethodTestClass)\n\nDocumentation for classmethodTestClass\nDocumentation for classmethodTestClass\n\n\n\n\nSuper\nsuper(type, object_or_type=None)\n\nAccessing inherited class attributes. Gets object_or_type.__mro__ starting from type on.\n\n\nclass A:\n    def method(self):\n        print(\"A\")\n        \nclass B(A):\n    def method(self):\n        print(\"B\")\n        super().method()\n        \nclass C(B):\n    def method(self):\n        print(\"C\")\n        super(B,self).method()\n\ntest = C()\ntest.method()\n\nC\nA\n\n\nYou can control the sequence in the resolution order by changing the classes __mro__ (Method Resolution Order), but for that a “hack” using metaclasses is necessary. Simply trying to set it does not cut it.\nSee pydoc.\n\nclass D(C):\n    __mro__ = (B, A, C, object)\n    \n    def method(self):\n        print(\"D\")\n        super().method()\n\ntestMRO = D()\ntestMRO.method()\n\nD\nC\nA\n\n\n\n\nGet Attribute and Has Attribute\ngettattr(object, name) and hasattr(object, name)\n\ngetattr() works like dict.get, only when not found and with no default, raises AttributeError.\n\n\nclass attrHolder:\n    ...\n    \ntest1 =  attrHolder()\ntest1.text = '42'\ngetattr(test1,'text')\n\n'42'\n\n\nIn case of non existing attribute:\n\ntry:\n    getattr(test1,'42')\nexcept AttributeError:\n    print(\"What is 6x9?\")\n\nWhat is 6x9?\n\n\n\nhasattr(obj,name) works by calling getattr(obj,name) and capturing the AttributeError to return False\n\n\nhasattr(test1,'text')\n\nTrue\n\n\n\n\nSet Attribute\nsettattr(obj, name, value)\n\nSet an attribute in object.\n\n\nclass setTest:\n    pass\n\nsetattr(setTest,'x','1')\nsetTest.x\n\n'1'\n\n\n\n\nDir\ndir(object=None)\n\nLists attributes for using __dir__() and __dict__. See __dir__ and for details pydocs.\n\n\n\nCallable\ncallable(object)\n\nWeather an object is callable: callable(x): return hasattr(x,'__call__'). See _call_().\n\n\ncallable(42), callable(int)\n\n(False, True)\n\n\n\nimport random\nprint(f\"current score:\\n{dir()[-12:]}\\n\")\nprint(f\"random module:\\n{dir(random)[-12:]}\\n\")\nprint(f\"mock class:\\n{dir(attrHolder)[-12:]}\\n\")\n\ncurrent score:\n['myp', 'nonstaticTest', 'quit', 'random', 'setTest', 'staticTest', 'staticTestClass', 'test', 'test1', 'testMRO', 'testObj', 'testStatic']\n\nrandom module:\n['paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate']\n\nmock class:\n['__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']\n\n\n\nback to top"
  },
  {
    "objectID": "01_Python/built-in.html#default-attributes",
    "href": "01_Python/built-in.html#default-attributes",
    "title": "Built-in functions",
    "section": "Default attributes",
    "text": "Default attributes\n\nDefaults and Keyword Defaults\n__defaults__\n__kwdefaults__\n\nA way to get the function’s default arguments and keyword-only default arguments\n\n\ndef aFunc(a=2,*b,c=10):\n    pass\n\nprint(aFunc.__defaults__, \"\\t\", aFunc.__kwdefaults__)\n\n(2,)     {'c': 10}\n\n\n\n\nName and Code\n__name__\n__code__\n\nName of function/method and related code object, which can be eval()\n\n\ndef pFunc():\n    print('42')\n    \nprint(f\"func: {pFunc.__name__} has code:\\n{pFunc.__code__}\")\n\nexec(pFunc.__code__)\n\nfunc: pFunc has code:\n&lt;code object pFunc at 0x000001F57E64C870, file \"C:\\Users\\Aang\\AppData\\Local\\Temp\\ipykernel_11404\\2946981887.py\", line 1&gt;\n42\n\n\n\nclass test:\n    ...\n    \ntest.__name__\n\n'test'\n\n\nback to top"
  },
  {
    "objectID": "01_Python/built-in.html#access-to-iterablesiterators",
    "href": "01_Python/built-in.html#access-to-iterablesiterators",
    "title": "Built-in functions",
    "section": "Access to iterables/iterators",
    "text": "Access to iterables/iterators\n\nEnumerate\nenumerate(iter, start=0)\n\nenumerate(x) returns an iterator of pairs (index, item), where item is next(x._iter__()).\n\n\nOptional argument for start index.\n\n\nfor x in enumerate(\"abcdef\", start=42): print(x)\n\n(42, 'a')\n(43, 'b')\n(44, 'c')\n(45, 'd')\n(46, 'e')\n(47, 'f')\n\n\n\n\nFilter\nfilter(f, iter)\n\nEquivalent to (x for x in iter if f(x))\n\n\ndef myF(x):\n    return x[0]%2\n\n(*filter(myF, enumerate(\"abcdef\", start=42)),)\n\n((43, 'b'), (45, 'd'), (47, 'f'))\n\n\n\n\nMap\nmap(f, iter, \\*iters)\n\nEquivalent to (f(x) for x in zip(iter,*iters))\n\n\nlist(map(max, (1,2,3,4,5), (9,3,1,7), (10,1,2,5)))\n\n[10, 3, 3, 7]\n\n\n\n\nReversed\nreversed(seq)\n\n“seq must be an object which has a __reversed__() method or supports the sequence protocol (the __len__() method and the __getitem__() method with integer arguments starting at 0).” [extract from pydoc].\n\nback to top"
  },
  {
    "objectID": "01_Python/built-in.html#conversion",
    "href": "01_Python/built-in.html#conversion",
    "title": "Built-in functions",
    "section": "Conversion",
    "text": "Conversion\n\nBinary conversion\nbin(int) -&gt; str\n\nbin(x) first calls x.__index__() to get integer then converts to binary representation string.\n\n\nprint(bin_var := bin(int(\"42\")), type(bin_var)) #no str.__index__\nint(bin_var, base=2)\n\n\n\nCharacter coding\nord(str) -&gt; int\nchr(int) -&gt; str\n\nconverting unicode char -&gt; int and int -&gt; unicode char\n\nlen(str) == 1\n0 &lt; i &lt; int('0x10FFFF', base=16)\n\nprint(\"\".join([chr(x) for x in range(65,69)]))\nord((*\"A\",)[0]) # str has to be len 1\n\nABCD\n\n\n65\n\n\nGot error with NBDEV using greek letters\n\n\nHexadecimal\nhex(int) -&gt; str\n\nconverting a number to hexadecimal representation string\n\n\nhex(18)\n\n'0x12'\n\n\nback to top"
  },
  {
    "objectID": "01_Python/built-in.html#math-operations",
    "href": "01_Python/built-in.html#math-operations",
    "title": "Built-in functions",
    "section": "Math Operations",
    "text": "Math Operations\n\nPower\npow(base, exp, mod=None)\n\nCalculates (base**exp)%mod in a more efficient way, allegedly. Details on modulus operations here\n\n\n\n\n898 ns ± 34.1 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\n\n\n\n1.78 µs ± 106 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)\n\n\nback to top"
  },
  {
    "objectID": "01_Python/dunder.html",
    "href": "01_Python/dunder.html",
    "title": "Dunder methods",
    "section": "",
    "text": "Methods in this page"
  },
  {
    "objectID": "01_Python/dunder.html#init__",
    "href": "01_Python/dunder.html#init__",
    "title": "Dunder methods",
    "section": "__init__()",
    "text": "__init__()\n\nInit is called when an object is instantiated by calling the class. Here we define an initializer which has default arguments and test its behaviour.\n\n\nclass myDund:\n    \"\"\"Test class for dunder methods. Other dunder methods are added as the explanation goes\"\"\"\n    \n    def __init__(self, number: int=0 # an integer number\n                 , text: str=\"nothing\"): # a string\n        self.number, self.text = number, text\n        \ntest1 = myDund()\nprint(test1.number, test1.text)\ntest2 = myDund(42,\"something\")\nprint(test2.number, test2.text)\nprint(test1)\ntest2\n\n0 nothing\n42 something\n&lt;__main__.myDund object&gt;\n\n\n&lt;__main__.myDund&gt;\n\n\nback to top"
  },
  {
    "objectID": "01_Python/dunder.html#new__",
    "href": "01_Python/dunder.html#new__",
    "title": "Dunder methods",
    "section": "__new__()",
    "text": "__new__()\n\nRuns prior to initialization and is supposed to return the object that will be returned by the instantiation of the class.\n\nHere we use it to control which class of object is created. A bit of boilerplate to get the classes’ names from __str__()\n\nclass baseTest:\n    @classmethod\n    def __repr__(cls):\n        return cls.__name__\n    \nclass Test(baseTest):\n    def __repr__(self):\n        return super().__repr__()\n    __str__ = __repr__\n\nclass testA(Test):\n    def __init__(self, *args, **kwargs):\n        super().__init__(self, *args, **kwargs)\n        x = kwargs['x']\n        \nclass testB(Test):\n    def __init__(self, *args, **kwargs):\n        super().__init__(self, *args, **kwargs)\n        y = kwargs['y']  \n        \nclass testNew(Test):\n    def __new__(cls, *args, **kwargs):\n        if 'x' in [*kwargs]:\n            obj = super(testNew,cls).__new__(testA, *args, **kwargs)\n        elif 'y' in [*kwargs]:\n            obj = super(testNew,cls).__new__(testB, *args, **kwargs)\n        else:\n            obj = super(testNew,cls).__new__(cls, *args, **kwargs)\n        return obj\n    \ntestNew1 = testNew(x=42)\ntestNew2 = testNew(y=\"42\")\ntestNew3 = testNew()\nprint(f\"{testNew1 = }\\n{testNew2 = }\\n{testNew3 = }\")\n\ntestNew1 = testA\ntestNew2 = testB\ntestNew3 = testNew\n\n\nback to top"
  },
  {
    "objectID": "01_Python/dunder.html#str__",
    "href": "01_Python/dunder.html#str__",
    "title": "Dunder methods",
    "section": "__str__()",
    "text": "__str__()\n\nOne thing to improve is the presentation of my object when printed or returned to the prompt. Str is called when print or str(built-in func, not obj method) is called on the object\n\n\ndef myStr(self: myDund):\n    \"\"\"Implementation of __str__()\"\"\"\n    return f\"({self.number}: {self.text})\"\n\nmyDund.__str__ = myStr\nprint(test1)\nstr(test1), test1\n\n(0: nothing)\n\n\n('(0: nothing)', &lt;__main__.myDund&gt;)\n\n\nback to top"
  },
  {
    "objectID": "01_Python/dunder.html#repr__",
    "href": "01_Python/dunder.html#repr__",
    "title": "Dunder methods",
    "section": "__repr__()",
    "text": "__repr__()\n\nRepr is used when __str__() is not implemented or in cases where you want to run eval on it, and should be implemented accordingly.\n\n\ndef myRepr(self: myDund):\n    \"\"\"Implementation of __repr__()\"\"\"\n    return f\"myDund(number={self.number}, text='{self.text}')\"\n\nmyDund.__repr__ = myRepr\nprint(test1.__repr__())\ntest3 = eval(test2.__repr__())\ntest3\n\nmyDund(number=0, text='nothing')\n\n\nmyDund(number=42, text='something')\n\n\nback to top"
  },
  {
    "objectID": "01_Python/dunder.html#eq__-__lt__-__gt__",
    "href": "01_Python/dunder.html#eq__-__lt__-__gt__",
    "title": "Dunder methods",
    "section": "__eq__(), __lt__(), __gt__()",
    "text": "__eq__(), __lt__(), __gt__()\n\nFor personalized comparissons __eq__(), __lt__() and __gt__() can be used\n\n\nmyDund.__eq__ = lambda self, other: (self.number,self.text)==(other.number,other.text)\nmyDund.__lt__ = lambda self, other: (self.number,self.text)&lt;(other.number,other.text)\nmyDund.__gt__ = lambda self, other: (self.number,self.text)&gt;(other.number,other.text)\nprint(f\"is {test3} equal to {test2}: \\t{test3 == test2}\")\nprint(f\"is {test3} less than {test1}: \\t{test3 &lt; test1}\")\nprint(f\"is {test3} greater than {test1}: \\t{test3 &gt; test1}\")\n\nis (42: something) equal to (42: something):    True\nis (42: something) less than (0: nothing):  False\nis (42: something) greater than (0: nothing):   True\n\n\nback to top"
  },
  {
    "objectID": "01_Python/dunder.html#len__",
    "href": "01_Python/dunder.html#len__",
    "title": "Dunder methods",
    "section": "__len__()",
    "text": "__len__()\n\nCalled by len() built-in method\n\n\ndef myLen(self: myDund) -&gt; int:\n    return len(self.text)\n    \nmyDund.__len__ = myLen\nlen(test1), len(test2)\n\n(7, 9)\n\n\nback to top"
  },
  {
    "objectID": "01_Python/dunder.html#contains__",
    "href": "01_Python/dunder.html#contains__",
    "title": "Dunder methods",
    "section": "__contains__()",
    "text": "__contains__()\n\nCalled by in built-in operator\n\n\ndef myCont(self: myDund, num: int) -&gt; bool:\n    return num in [self.number]\n    \nmyDund.__contains__ = myCont\nprint(f\"0 in {test1}: {0 in test1}\")\n\n0 in (0: nothing): True\n\n\nback to top"
  },
  {
    "objectID": "01_Python/dunder.html#hash__",
    "href": "01_Python/dunder.html#hash__",
    "title": "Dunder methods",
    "section": "__hash__()",
    "text": "__hash__()\n\nCalled by hash() built-in method\n\nHash generates a per run random number (if not int/float) for an object.\nHash calls __hash__() on an object if defined and truncates if representation is of higher bit width than host machine.\n\nprint(hash(1))\nprint(f\"Hash for class {myDund.__name__}: {hash(myDund)}\")\nprint(f\"Hash for object {test2}, id {id(test2)}: {hash(test2)}\")\nprint(f\"Hash for object {test3}, id {id(test3)}: {hash(test3)}\")\n\n1\nHash for class myDund: 172505833084\nHash for object (42: something), id 2760109428944: 172506839309\nHash for object (42: something), id 2760109431584: 172506839474\n\n\nThe __hash__() method can then be overwritten for custom behaviour.\n\nmyDund.__hash__ = lambda self: hash(self.text)\nprint(f\"Hash for class {myDund.__name__}: {hash(myDund)}\")\nprint(f\"Hash for object {test2}, id {id(test2)}: {hash(test2)}\")\nprint(f\"Hash for object {test3}, id {id(test3)}: {hash(test3)}\")\n\nHash for class myDund: 172505833084\nHash for object (42: something), id 2760109428944: 6151054915300685838\nHash for object (42: something), id 2760109431584: 6151054915300685838\n\n\nback to top"
  },
  {
    "objectID": "01_Python/dunder.html#call__",
    "href": "01_Python/dunder.html#call__",
    "title": "Dunder methods",
    "section": "__call__()",
    "text": "__call__()\n\nCall when using the () operator.\n\nSee callable().\n\nmyDund.__call__ = lambda self: self.number*(self.text+\" \")\ntest2()\n\n'something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something something '\n\n\nback to top"
  },
  {
    "objectID": "01_Python/dunder.html#dir__",
    "href": "01_Python/dunder.html#dir__",
    "title": "Dunder methods",
    "section": "__dir__()",
    "text": "__dir__()\n\nCalled by dir() built-in method.\n“Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.”\n\nSee dir().\n\nmyDund.__dir__ = lambda self: \"this is inside\"\nprint(dir(test1)) # returns as a sorted list\nmyDund.__dir__ = lambda self: [\"this\", \"is\", \"inside\"]\nprint(dir(test1)) # already a list, just sorts\n\n[' ', ' ', 'd', 'e', 'h', 'i', 'i', 'i', 'i', 'n', 's', 's', 's', 't']\n['inside', 'is', 'this']\n\n\nback to top"
  },
  {
    "objectID": "01_Python/others.html#language-features",
    "href": "01_Python/others.html#language-features",
    "title": "General Python Tips",
    "section": "language features",
    "text": "language features\n\nx = y = 18\nprint(id(x),id(y), id(18))\nx is y\n\n140711489444032 140711489444032 140711489444032\n\n\nTrue\n\n\n\nchr(int('0x10FFFF',base=16))#.to_bytes(3, 'big')\n\n'\\U0010ffff'\n\n\nback to top"
  },
  {
    "objectID": "01_Python/others.html#class-decorators",
    "href": "01_Python/others.html#class-decorators",
    "title": "General Python Tips",
    "section": "class decorators",
    "text": "class decorators\n\nWorks as a hidden inheritence\n\n\ndef decorator(cls):\n    class wrapperClass(cls):\n        attribute = \"value\"\n    return wrapperClass\n\n@decorator\nclass exampleClass:\n    ...\n\nexample = exampleClass()\nexample.attribute\n\n'value'\n\n\n\nexample.__class__\n\n__main__.decorator.&lt;locals&gt;.wrapperClass\n\n\nback to top"
  },
  {
    "objectID": "01_Python/others.html#metaclass",
    "href": "01_Python/others.html#metaclass",
    "title": "General Python Tips",
    "section": "metaclass",
    "text": "metaclass\n\nSomething like a factory. Ultimately, type creates the objects, apparently.\n\n\nclass Meta(type):\n    def __new__(mcs, name, bases, class_dict, **kwargs):\n        class_ = super().__new__(mcs, name, bases, class_dict)\n        if kwargs:\n            for name, value in kwargs.items():\n                setattr(class_, name, value)\n        return class_\n\nclass testMeta(object, metaclass=Meta, attr1=True, attr2='42'):\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\n        \ndir(testMeta(\" \",10))[-4:]\n\n['attr1', 'attr2', 'name', 'value']\n\n\nback to top"
  },
  {
    "objectID": "01_Python/others.html#dict",
    "href": "01_Python/others.html#dict",
    "title": "General Python Tips",
    "section": "dict",
    "text": "dict\n\nproper dictionary manipulation\n\nAccessing with default value.\n\nd = {'a':1, 'b':2, 'c':3}\n\nd.get('d',0)\n\n0\n\n\nUsing KeyError to set new keys.\n\ntry:\n    print(f\"{d['d']= }\")\nexcept KeyError:\n    d['d']=0\nd['d']\n\n0\n\n\nSince python 3.9 the union operator | works in dicts as well. Since I am currently on 3.8, here’s a union of sets, but you get the gist.\n\n{1,2,3} | {4,5}\n\n{1, 2, 3, 4, 5}\n\n\nback to top"
  },
  {
    "objectID": "01_Python/others.html#printing",
    "href": "01_Python/others.html#printing",
    "title": "General Python Tips",
    "section": "Printing",
    "text": "Printing\nIt is possible to append :character[&lt;^&gt;]number while formatting a string to include a character multiple times so as to the final string have size of at least number\n\nprint(\"{:_^24}\".format(\"lero\"))\n\"{:_&gt;14}\".format(\"lero\")\n\n__________lero__________\n\n\n'__________lero'\n\n\nf-strings can be formatted to insert variables/expressions before equal sign and value.\n\nd = {'a':1, 'b':2}\nf\"{d['b']= }\"\n\n\"d['b']= 2\"\n\n\nback to top"
  },
  {
    "objectID": "07_others/05_twicking.html",
    "href": "07_others/05_twicking.html",
    "title": "Twicking",
    "section": "",
    "text": "Aids for twicking parameters, visual or otherwise.\n\n\ninteractive ipywidgets\n\nframe = pd.DataFrame(data=np.concatenate((np.random.rand(10,1),np.random.randint(0, high=2, size=(10,1))), axis=1), columns=['indep_var',\"group_var\"])\nframe[\"group_var\"] = pd.Categorical(frame[\"group_var\"].apply(lambda x: \"A\" if x else \"B\"))\n\n\nframe[\"group_var\"] = frame[\"group_var\"].cat.set_categories(frame[\"group_var\"].cat.categories, ordered=True)\n\n\nframe[\"group_var\"].mode()[0]\n\n'A'\n\n\n\ndef iscore(nm, split):\n    try:\n        return \"Hot\" if frame[nm].mode()&gt;split else \"Cold\"\n    except KeyError:\n        return \"Oops\"\n\n\n#interact(nm=[\"group_var\",\"indep_var\"], split=1)(iscore)\n\nback to top"
  },
  {
    "objectID": "07_others/06_tty.html",
    "href": "07_others/06_tty.html",
    "title": "Terminal formatting",
    "section": "",
    "text": "General data science packets\n\nnp.set_printoptions(linewidth=30)\n\n\nnp.array([0]*63)\n\narray([0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0])"
  },
  {
    "objectID": "07_others/structure.html#dataclasses",
    "href": "07_others/structure.html#dataclasses",
    "title": "Structuring code",
    "section": "dataclasses",
    "text": "dataclasses\n\ndataclasses for easy data classes with attributes which may be const\n\n\n@dataclass(order=True, frozen=True)\nclass Command:\n    command: str\n    arguments: List[str]\n\ndef createComm(comm, *others) -&gt; Command:\n    return Command(comm, others)\n\ndef testFeatures():\n    cmd1 = createComm(*\"go fetch the ball\".split())\n    cmd2 = createComm(*\"come get some food\".split())\n    print(cmd1, cmd2, sep=\"\\t\")\n    print(cmd1&gt;cmd2)\n    \ndef testFreeze():\n    cmd, *rest = \"what does the fox say\".split()\n    test = Command(cmd, rest)\n    test.command = \"other\"\n    print(test.command, test.arguments)\n\n#if __name__ == \"__main__\":\n#    main()\n\nGood clean printing description plus order=True allows for comparisson\n\ntestFeatures()\n\nCommand(command='go', arguments=('fetch', 'the', 'ball'))   Command(command='come', arguments=('get', 'some', 'food'))\nTrue\n\n\nHere we can see the frozen=True rises and error when we try to reset an attribute\n\ntry:\n    testFreeze()\nexcept FrozenInstanceError as e:\n    print(e.__class__.__name__, \": \", e)\n\nFrozenInstanceError :  cannot assign to field 'command'\n\n\nback to top"
  },
  {
    "objectID": "07_others/structure.html#typing",
    "href": "07_others/structure.html#typing",
    "title": "Structuring code",
    "section": "typing",
    "text": "typing\n\ntyping has to be called for type hintting on callables and lists.\n\n\nNot on newer python, apparently\n\n\ndef uDictRandKey(frand: Callable[[List[str],int],List[int]]=np.random.choice,\n                 base: str=letters, qty: int=1) -&gt; List[str]:\n    keys = []\n    numChars = 1\n    baseSize = len(set(base))\n    while (qty//(baseSize**numChars)): numChars+=1\n    \n    return frand([*base], size=qty)\nnp.random.choice([*letters], size=10)\n\narray(['a', 't', 'e', 'r', 'm', 'n', 'e', 'v', 'e', 'i'], dtype='&lt;U1')\n\n\n\nuDictRandKey(np.random.choice)\n\narray(['d'], dtype='&lt;U1')\n\n\nback to top"
  },
  {
    "objectID": "07_others/structure.html#protocol",
    "href": "07_others/structure.html#protocol",
    "title": "Structuring code",
    "section": "Protocol",
    "text": "Protocol\n\nProtocol class implements interfaces in python. “Duck-typing”: if it has the right methods, it is the right type\n\n\nclass call(Protocol):\n    def talk():\n        ...\n    def listen():\n        ...\n        \nclass msg(Protocol):\n    def write():\n        ...\n    def read():\n        ...\n        \nclass extro:\n    def __init__(self, name=\"Beeblebrot\"):\n        self.name = name\n    def talk(self):\n        print(f\"{self.name} is talking..\")\n    def listen(self):\n        print(f\"{self.name} is not listening..\")\n    def read(self):\n        print(f\"{self.name} is not reading..\")\n    def write(self):\n        print(f\"{self.name} is writing..\")\n        \nclass intro:\n    def __init__(self, name=\"Arthur\"):\n        self.name = name\n    def talk(self):\n        print(f\"{self.name} is not talking..\")\n    def listen(self):\n        print(f\"{self.name} is listening..\")\n    def read(self):\n        print(f\"{self.name} is reading..\")\n    def write(self):\n        print(f\"{self.name} is not writing..\")\n        \ndef phonecall(person1: call, person2: call):\n    person1.talk()\n    person2.listen()\n    person2.talk()\n    person1.listen()\n    \ndef textchat(person1: msg, person2: msg):\n    person1.write()\n    person2.read()\n    person2.write()\n    person1.read()\n    \np1, p2 = extro(), intro()\nphonecall(p1,p2)\ntextchat(p1,p2)\n\nBeeblebrot is talking..\nArthur is listening..\nArthur is not talking..\nBeeblebrot is not listening..\nBeeblebrot is writing..\nArthur is reading..\nArthur is not writing..\nBeeblebrot is not reading..\n\n\nback to top"
  },
  {
    "objectID": "07_others/structure.html#partial",
    "href": "07_others/structure.html#partial",
    "title": "Structuring code",
    "section": "partial",
    "text": "partial\n\npartial decorator/class allows for parameter pre setting in functions\n\n\ndef myprint(toPrint,toPrint2):\n    print(toPrint,toPrint2)\n\notherprint = partial(myprint, toPrint2=\"42\")\notherprint(\"what is 6x8? \")\notherprint(\"what is 6x7? \")\n\nwhat is 6x8?  42\nwhat is 6x7?  42\n\n\nback to top"
  },
  {
    "objectID": "07_others/structure.html#abc-and-abstractmethod",
    "href": "07_others/structure.html#abc-and-abstractmethod",
    "title": "Structuring code",
    "section": "ABC and abstractmethod",
    "text": "ABC and abstractmethod\n\nABC class inheriting and abstractmethod decorator implements abstract classes in python\n\n\nclass absClass(ABC):\n    @abstractmethod\n    def aMethod(self):\n        '''this method does this'''\n    \n    @abstractmethod\n    def bMethod(self):\n        '''this method does that'''\n        \nclass concreteClass(absClass):\n    \n    def aMethod(self):\n        print('this method does this')\n        return self\n        \n    def bMethod(self):\n        print('this method does that')\n        return self\n        \ndef testABC(obj: absClass):\n    obj.aMethod().bMethod()\n    \ntestABC(concreteClass())\n\nthis method does this\nthis method does that\n\n\nback to top"
  },
  {
    "objectID": "07_others/testing.html#unittest",
    "href": "07_others/testing.html#unittest",
    "title": "Testing",
    "section": "unittest",
    "text": "unittest\n\nAllows for the creation of test and subsequent automation.\n@patch can be used as: with patch('builtins.input', return_value=\"42\"): inside testing function\n\nUsing the example class below:\n\nclass TestTarget:\n    def __init__(self,x=0):\n        self._x=x\n        self._isSet = False\n        \n    def receiveInput():\n        self._x = int(input(\"set an integer\"))\n        self.isSet = True\n        \n    @property\n    def x():\n        return self._x\n        \n    @property\n    def isSet(self):\n        return self._isSet\n    \n    @isSet.setter\n    def isSet(self, x):\n        self._isSet = x\n\nWhich can be organized as a single test case with two test functions\n\nclass testCase(unittest.TestCase):\n    def test_init(self):\n        target = TestTarget()\n        self.assertFalse(target.isSet)\n        self.assertEqual(target.x,0)\n        \n    @patch('builtins.input', return_value=\"42\")\n    def test_setting(self, mocked_input):\n        target = TestTarget(1)\n        self.assertEqual(target.x,1)\n        target.receiveInput()\n        self.assertTrue(target.isSet)\n        self.assertEqual(target.x,42)\n\nback to top"
  },
  {
    "objectID": "07_others/etc.html#ipython",
    "href": "07_others/etc.html#ipython",
    "title": "Neat Tricks from other Libs",
    "section": "IPython",
    "text": "IPython\n\nDisplaying audio\n\nt = np.linspace(0,5,44100*5)\nsine = np.sin(2*np.pi*520*t)\naudio = Audio(sine, rate=44100)\n\ndisplay(audio)\n\n\n                \n                    \n                    Your browser does not support the audio element.\n                \n              \n\n\n\n\nDisplaying Progress Bar\nHTML style\n\npb = ProgressBar(12)\nfor _ in pb: time.sleep(0.5)\n\n\n\n\nOld school\n\nfor i in range(11):\n    pb.progress = i\n    print('\\r', pb, sep='', end='')\n    time.sleep(0.5)\n\n[==================================================          ] 10/12\n\n\nChanging ProgressBar properties\n\npb2 = ProgressBar(35)\npb2.html_width = '70ex'\npb2.text_width = 50\npb2.display()\n\n\n\n\n\nfor i in range(11):\n    pb2.progress = i\n    print('\\r', pb2, sep='', end='')\n    time.sleep(0.5)\n\n[==============                                    ] 10/35\n\n\n\n\nDisplaying HTML\n\nhtml = '''&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Method&lt;/th&gt;\n    &lt;th&gt;Pros&lt;/th&gt;\n    &lt;th&gt;Cons&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;KS-test&lt;/td&gt;\n    &lt;td&gt;Easy to implement, widely used, suitable for continuous data&lt;/td&gt;\n    &lt;td&gt;Assumes normal distribution, may not work well for small sample sizes&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;t-test&lt;/td&gt;\n    &lt;td&gt;Easy to implement, widely used, suitable for continuous data&lt;/td&gt;\n    &lt;td&gt;Assumes normal distribution, may not work well for small sample sizes, requires equal variances&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Jensen-Shannon&lt;/td&gt;\n    &lt;td&gt;Works well for both continuous and discrete data, does not assume normal distribution&lt;/td&gt;\n    &lt;td&gt;May be computationally expensive for large datasets, may not work well for high-dimensional data&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Wasserstein distance&lt;/td&gt;\n    &lt;td&gt;Works well for both continuous and discrete data, does not assume normal distribution&lt;/td&gt;\n    &lt;td&gt;May be computationally expensive for large datasets, may not work well for high-dimensional data&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;PSI&lt;/td&gt;\n    &lt;td&gt;Can detect both magnitude and direction of drift, suitable for both continuous and categorical data&lt;/td&gt;\n    &lt;td&gt;May be sensitive to small changes, may require a large reference dataset&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;'''\ndisplay(HTML(html))\n\n\n\n\nMethod\nPros\nCons\n\n\nKS-test\nEasy to implement, widely used, suitable for continuous data\nAssumes normal distribution, may not work well for small sample sizes\n\n\nt-test\nEasy to implement, widely used, suitable for continuous data\nAssumes normal distribution, may not work well for small sample sizes, requires equal variances\n\n\nJensen-Shannon\nWorks well for both continuous and discrete data, does not assume normal distribution\nMay be computationally expensive for large datasets, may not work well for high-dimensional data\n\n\nWasserstein distance\nWorks well for both continuous and discrete data, does not assume normal distribution\nMay be computationally expensive for large datasets, may not work well for high-dimensional data\n\n\nPSI\nCan detect both magnitude and direction of drift, suitable for both continuous and categorical data\nMay be sensitive to small changes, may require a large reference dataset\n\n\n\n\n\n\n\nDisplay Math expressions\n\nMath('$ {x_{a}}^2$')\n\n\\(\\displaystyle {x_{a}}^2\\)\n\n\nback to top"
  },
  {
    "objectID": "07_others/etc.html#pyautogui",
    "href": "07_others/etc.html#pyautogui",
    "title": "Neat Tricks from other Libs",
    "section": "PyAutoGUI",
    "text": "PyAutoGUI\n\npa.FAILSAFE = True\nw,h = pa.size()\nrandom.seed(42)\n\ndef moveWithin():\n    pa.moveTo(random.randint(0,w),random.randint(0,h), duration=2)\n\nwhile True:\n    try:\n        moveWithin()\n    except pa.FailSafeException:\n        print(f\"Stopping with the randomness 'cause: {pa.FailSafeException}\")\n        break\nprint(pa.position())\n\nStopping with the randomness 'cause: &lt;class 'pyautogui.FailSafeException'&gt;\nPoint(x=0, y=1079)"
  },
  {
    "objectID": "07_others/etc.html#redlines",
    "href": "07_others/etc.html#redlines",
    "title": "Neat Tricks from other Libs",
    "section": "Redlines",
    "text": "Redlines\nFind differences between two texts\n\nt1 = 'She sells seashells in Seychelles'\nt2 = 'She shells seysells in Seachelles'\ndiff = Redlines(t2, t1)\ndisplay(Markdown(diff.output_markdown))\n\nShe shells seysells sells seashells in SeachellesSeychelles\n\n\nback to top"
  },
  {
    "objectID": "07_others/test_openai.html",
    "href": "07_others/test_openai.html",
    "title": "Open AI",
    "section": "",
    "text": "load_dotenv(find_dotenv())\n\nopenai.api_key = os.getenv('OPENAI_API_KEY')\ndef get_complet(prompt, model='gpt-3.5-turbo', temperature=0):\n    messages = [{'role':'user', 'content':prompt}]\n    resp = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature)\n    \n    return resp.choices[0].message['content']\nprompt = '''\nCite the 5 more relevant sentiments related to the following text surrounded by ```\n\n```I think this is not going to be quite what you expect```\n'''\nresponse = get_complet(prompt)\nprint(response)\n\n1. Disappointment\n2. Uncertainty\n3. Skepticism\n4. Pessimism\n5. Apprehension\nprompt = '''\nPresent in a technical and objective manner the steps for calculating the Population Stability Index.\n'''\nresponse = get_complet(prompt)\nprint(response)\n\nThe Population Stability Index (PSI) is a statistical measure used to assess the stability of a population over time. It is commonly used in the field of credit risk management to monitor changes in the creditworthiness of a portfolio of borrowers. The PSI is calculated by following these steps:\n\n1. Divide the population into two groups: the reference group and the comparison group. The reference group is typically the population at a specific point in time, such as the current year, while the comparison group is the population at a previous point in time, such as the previous year.\n\n2. Calculate the percentage of each group in each of several predefined score ranges. For example, if the score range is 0-100, the percentage of borrowers in each range would be calculated for both the reference and comparison groups.\n\n3. Calculate the expected percentage of borrowers in each score range for the reference group. This can be done by multiplying the total number of borrowers in the reference group by the percentage of borrowers in each score range.\n\n4. Calculate the actual percentage of borrowers in each score range for the comparison group. This can be done by multiplying the total number of borrowers in the comparison group by the percentage of borrowers in each score range.\n\n5. Calculate the PSI for each score range by using the following formula: PSI = (Actual Percentage - Expected Percentage) * ln(Actual Percentage / Expected Percentage)\n\n6. Sum the PSI values for all score ranges to obtain the overall PSI for the population.\n\nA PSI value of less than 0.1 is generally considered to indicate a stable population, while a value greater than 0.25 indicates significant changes in the population. The PSI can be used to identify areas of the population that are experiencing significant changes, which can help lenders to adjust their risk management strategies accordingly.\nprompt = '''\nGive pros and cons of using ks-test, t-test, jensen-shannon, wasserstein distance or psi \\\nfor data drift detection as a table.\nThe response should be organized as an HTML table.\n'''\nresponse = get_complet(prompt)\nprint(response)\n\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Method&lt;/th&gt;\n    &lt;th&gt;Pros&lt;/th&gt;\n    &lt;th&gt;Cons&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;KS-test&lt;/td&gt;\n    &lt;td&gt;Easy to implement, widely used, suitable for continuous data&lt;/td&gt;\n    &lt;td&gt;Assumes normal distribution, may not work well for small sample sizes&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;t-test&lt;/td&gt;\n    &lt;td&gt;Easy to implement, widely used, suitable for continuous data&lt;/td&gt;\n    &lt;td&gt;Assumes normal distribution, may not work well for small sample sizes, requires equal variances&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Jensen-Shannon&lt;/td&gt;\n    &lt;td&gt;Works well for both continuous and discrete data, does not assume normal distribution&lt;/td&gt;\n    &lt;td&gt;May be computationally expensive for large datasets, may not work well for high-dimensional data&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Wasserstein distance&lt;/td&gt;\n    &lt;td&gt;Works well for both continuous and discrete data, does not assume normal distribution&lt;/td&gt;\n    &lt;td&gt;May be computationally expensive for large datasets, may not work well for high-dimensional data&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;PSI&lt;/td&gt;\n    &lt;td&gt;Can detect both magnitude and direction of drift, suitable for both continuous and categorical data&lt;/td&gt;\n    &lt;td&gt;May be sensitive to small changes, may require a large reference dataset&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\ndisplayplay(HTML(response))\n\n\n\n\nMethod\nPros\nCons\n\n\nKS-test\nEasy to implement, widely used, suitable for continuous data\nAssumes normal distribution, may not work well for small sample sizes\n\n\nt-test\nEasy to implement, widely used, suitable for continuous data\nAssumes normal distribution, may not work well for small sample sizes, requires equal variances\n\n\nJensen-Shannon\nWorks well for both continuous and discrete data, does not assume normal distribution\nMay be computationally expensive for large datasets, may not work well for high-dimensional data\n\n\nWasserstein distance\nWorks well for both continuous and discrete data, does not assume normal distribution\nMay be computationally expensive for large datasets, may not work well for high-dimensional data\n\n\nPSI\nCan detect both magnitude and direction of drift, suitable for both continuous and categorical data\nMay be sensitive to small changes, may require a large reference dataset\nprompt = '''\nWrite code in python or C/C++ to capture voice commands\n'''\nresponse = get_complet(prompt)\nprint(response)\n\nPython code:\n\nimport speech_recognition as sr\n\n# initialize the recognizer\nr = sr.Recognizer()\n\n# use the microphone as source\nwith sr.Microphone() as source:\n    print(\"Speak something...\")\n    audio = r.listen(source)\n\n# recognize speech using Google Speech Recognition\ntry:\n    print(\"You said: \" + r.recognize_google(audio))\nexcept sr.UnknownValueError:\n    print(\"Google Speech Recognition could not understand audio\")\nexcept sr.RequestError as e:\n    print(\"Could not request results from Google Speech Recognition service; {0}\".format(e))\n\nC/C++ code:\n\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sphinxbase/ad.h&gt;\n#include &lt;pocketsphinx.h&gt;\n\nint main(int argc, char *argv[]) {\n    ps_decoder_t *ps;\n    cmd_ln_t *config;\n    FILE *fh;\n    char const *hyp, *uttid;\n    int16 buf[512];\n    int rv;\n    int32 score;\n\n    config = cmd_ln_init(NULL, ps_args(), TRUE,\n                 \"-hmm\", MODELDIR \"/en-us/en-us\",\n                 \"-lm\", MODELDIR \"/en-us/en-us.lm.bin\",\n                 \"-dict\", MODELDIR \"/en-us/cmudict-en-us.dict\",\n                 NULL);\n\n    if (config == NULL) {\n        fprintf(stderr, \"Failed to create config object, see log for details\\n\");\n        return -1;\n    }\n\n    ps = ps_init(config);\n    if (ps == NULL) {\n        fprintf(stderr, \"Failed to create recognizer, see log for details\\n\");\n        return -1;\n    }\n\n    fh = fopen(\"test.wav\", \"rb\");\n    if (fh == NULL) {\n        fprintf(stderr, \"Unable to open input file\\n\");\n        return -1;\n    }\n\n    rv = ps_decode_raw(ps, fh, \"test\", -1);\n    if (rv &lt; 0) {\n        fprintf(stderr, \"Failed to decode audio file, see log for details\\n\");\n        return -1;\n    }\n\n    hyp = ps_get_hyp(ps, &score);\n    printf(\"Recognized: %s\\n\", hyp);\n\n    fclose(fh);\n    ps_free(ps);\n    cmd_ln_free_r(config);\n\n    return 0;\n}\nback to top"
  },
  {
    "objectID": "07_others/test_openai.html#expanding",
    "href": "07_others/test_openai.html#expanding",
    "title": "Open AI",
    "section": "Expanding",
    "text": "Expanding\n\n# given the sentiment from the lesson on \"inferring\",\n# and the original customer message, customize the email\nsentiment = \"negative\"\n\n# review for a blender\nreview = f\"\"\"\nSo, they still had the 17 piece system on seasonal \\\nsale for around $49 in the month of November, about \\\nhalf off, but for some reason (call it price gouging) \\\naround the second week of December the prices all went \\\nup to about anywhere from between $70-$89 for the same \\\nsystem. And the 11 piece system went up around $10 or \\\nso in price also from the earlier sale price of $29. \\\nSo it looks okay, but if you look at the base, the part \\\nwhere the blade locks into place doesn’t look as good \\\nas in previous editions from a few years ago, but I \\\nplan to be very gentle with it (example, I crush \\\nvery hard items like beans, ice, rice, etc. in the \\ \nblender first then pulverize them in the serving size \\\nI want in the blender then switch to the whipping \\\nblade for a finer flour, and use the cross cutting blade \\\nfirst when making smoothies, then use the flat blade \\\nif I need them finer/less pulpy). Special tip when making \\\nsmoothies, finely cut and freeze the fruits and \\\nvegetables (if using spinach-lightly stew soften the \\ \nspinach then freeze until ready for use-and if making \\\nsorbet, use a small to medium sized food processor) \\ \nthat you plan to use that way you can avoid adding so \\\nmuch ice if at all-when making your smoothie. \\\nAfter about a year, the motor was making a funny noise. \\\nI called customer service but the warranty expired \\\nalready, so I had to buy another one. FYI: The overall \\\nquality has gone done in these types of products, so \\\nthey are kind of counting on brand recognition and \\\nconsumer loyalty to maintain sales. Got it in about \\\ntwo days.\n\"\"\"\n\n\nprompt = f\"\"\"\nYou are a customer service AI assistant.\nYour task is to send an email reply to a valued customer.\nGiven the customer email delimited by ```, \\\nGenerate a reply to thank the customer for their review.\nIf the sentiment is positive or neutral, thank them for \\\ntheir review.\nIf the sentiment is negative, apologize and suggest that \\\nthey can reach out to customer service. \nMake sure to use specific details from the review.\nWrite in a concise and professional tone.\nSign the email as `AI customer agent`.\nCustomer review: ```{review}```\nReview sentiment: {sentiment}\n\"\"\"\nresponse = get_complet(prompt)\nprint(response)\n\nDear valued customer,\n\nThank you for taking the time to leave a review about our product. We are sorry to hear that you experienced a price increase and that the quality of the product did not meet your expectations. We apologize for any inconvenience this may have caused you.\n\nIf you have any further concerns or questions, please do not hesitate to reach out to our customer service team. They will be more than happy to assist you in any way they can.\n\nThank you again for your feedback. We appreciate your business and hope to have the opportunity to serve you better in the future.\n\nBest regards,\n\nAI customer agent\n\n\n\nprompt2 = f\"\"\"\nYou are a customer service AI assistant.\nYour task is to send an email reply to a valued customer.\nGiven the customer email delimited by ```, \\\nGenerate a reply to thank the customer for their review.\nIf the sentiment is positive or neutral, thank them for \\\ntheir review.\nIf the sentiment is negative, apologize and suggest that \\\nthey can reach out to customer service. \nMake sure to use specific details from the review.\nWrite in a concise and professional tone.\nSign the email as `AI customer agent`.\nCustomer review: ```{review}```\nReview sentiment: {sentiment}\n\"\"\"\nresponse = get_complet(prompt2, temperature=0.7)\nprint(response)\n\nDear Customer,\n\nThank you for taking the time to leave a review. We apologize for any inconvenience you experienced with the pricing of our products. We strive to provide the best value possible to our customers, and we're sorry we fell short in this instance. We appreciate your feedback on the quality of our products and will take it into consideration as we continue to improve.\n\nWe understand your frustration with the motor issue you experienced, and we apologize for any inconvenience this may have caused. If you have any further concerns, please do not hesitate to reach out to our customer service team for assistance. They will be more than happy to help you resolve any issues you may have.\n\nThank you again for your feedback, and we hope to have the opportunity to serve you better in the future.\n\nBest regards,\nAI customer agent\n\n\nback to top"
  },
  {
    "objectID": "07_others/test_openai.html#chatbot",
    "href": "07_others/test_openai.html#chatbot",
    "title": "Open AI",
    "section": "ChatBot",
    "text": "ChatBot\n\ndef get_completion(prompt, model=\"gpt-3.5-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model's output\n    )\n    return response.choices[0].message[\"content\"]\n\ndef get_completion_from_messages(messages, model=\"gpt-3.5-turbo\", temperature=0):\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature, # this is the degree of randomness of the model's output\n    )\n#     print(str(response.choices[0].message))\n    return response.choices[0].message[\"content\"]\n\n\ndef collect_messages(_):\n    prompt = inp.value_input\n    inp.value = ''\n    context.append({'role':'user', 'content':f\"{prompt}\"})\n    response = get_completion_from_messages(context) \n    context.append({'role':'assistant', 'content':f\"{response}\"})\n    panels.append(\n        pn.Row('User:', pn.pane.Markdown(prompt, width=600)))\n    panels.append(\n        pn.Row('Assistant:', pn.pane.Markdown(response, width=600, style={'background-color': '#F6F6F6'})))\n \n    return pn.Column(*panels)\n\n\npn.extension()\n\npanels = [] # collect display \n\ncontext = [ {'role':'system', 'content':\"\"\"\nYou are OrderBot, an automated service to collect orders for a pizza restaurant. \\\nYou first greet the customer, then collects the order, \\\nand then asks if it's a pickup or delivery. \\\nYou wait to collect the entire order, then summarize it and check for a final \\\ntime if the customer wants to add anything else. \\\nIf it's a delivery, you ask for an address. \\\nFinally you collect the payment.\\\nMake sure to clarify all options, extras and sizes to uniquely \\\nidentify the item from the menu.\\\nYou respond in a short, very conversational friendly style. \\\nThe menu includes \\\npepperoni pizza  12.95, 10.00, 7.00 \\\ncheese pizza   10.95, 9.25, 6.50 \\\neggplant pizza   11.95, 9.75, 6.75 \\\nfries 4.50, 3.50 \\\ngreek salad 7.25 \\\nToppings: \\\nextra cheese 2.00, \\\nmushrooms 1.50 \\\nsausage 3.00 \\\ncanadian bacon 3.50 \\\nAI sauce 1.50 \\\npeppers 1.00 \\\nDrinks: \\\ncoke 3.00, 2.00, 1.00 \\\nsprite 3.00, 2.00, 1.00 \\\nbottled water 5.00 \\\n\"\"\"} ]  # accumulate messages\n\n\ninp = pn.widgets.TextInput(value=\"Hi\", placeholder='Enter text here…')\nbutton_conversation = pn.widgets.Button(name=\"Chat!\")\n\ninteractive_conversation = pn.bind(collect_messages, button_conversation)\n\ndashboard = pn.Column(\n    inp,\n    pn.Row(button_conversation),\n    pn.panel(interactive_conversation, loading_indicator=True, height=300),\n)\n\ndashboard\n\n\nmessages =  context.copy()\nmessages.append(\n{'role':'system', 'content':'create a json summary of the previous food order. Itemize the price for each item\\\n The fields should be 1) pizza, include size 2) list of toppings 3) list of drinks, include size   4) list of sides include size  5)total price '},    \n)\n #The fields should be 1) pizza, price 2) list of toppings 3) list of drinks, include size include price  4) list of sides include size include price, 5)total price '},    \n\nresponse = get_completion_from_messages(messages, temperature=0)\nprint(response)\n\nback to top"
  },
  {
    "objectID": "07_others/managing.html#uuid7",
    "href": "07_others/managing.html#uuid7",
    "title": "Managing",
    "section": "uuid7",
    "text": "uuid7\na unique id generator\n\ncan pass arg as_type=['bytes'|'hex'|'int'|'str'|'uuid'|None]\nGet lib doc here\n\nInstall:\n !pip install uuid7\n\nprint(uuid7str())\nuuid7()\n\n063cabb4-e911-7d51-8000-f8904776131a\n\n\nUUID('063cabb4-e915-7ebd-8000-d479d1fdb216')"
  },
  {
    "objectID": "07_others/managing.html#uuid",
    "href": "07_others/managing.html#uuid",
    "title": "Managing",
    "section": "uuid",
    "text": "uuid\na unique id generator\n\nGet lib doc here\n\n\nuuid4()\n\nUUID('f7ffabe4-9ed9-4066-9f25-7913750d33de')\n\n\nback to top"
  },
  {
    "objectID": "07_others/plotting.html#matplotlib",
    "href": "07_others/plotting.html#matplotlib",
    "title": "Plotting",
    "section": "Matplotlib",
    "text": "Matplotlib\nScatter plotting\n\nimport numpy as np\n\n\nfig, ax = plt.subplots()\nfor label in [\"first\", \"second\", \"third\"]:\n    ax.scatter(np.random.randn(10)*20, np.random.randn(10)*2,\n            s=np.random.randint(10,30,10)**2, cmap=plt.cm.Spectral, alpha=0.5, label=label);\n\n#Legend configuring\nlegend = plt.legend(loc='upper left', shadow=True)\nframe = legend.get_frame()\nframe.set_facecolor('0.50')\n\n\n\n\nback to top"
  },
  {
    "objectID": "07_others/plotting.html#sympy",
    "href": "07_others/plotting.html#sympy",
    "title": "Plotting",
    "section": "Sympy",
    "text": "Sympy\n\nPloting functions from text description\n\n\nsympy.plot(\"(exp(x)-exp(-x))/(exp(x)+exp(-x))\", xlim=(-2.5,2.5))\n\n\n\n\n&lt;sympy.plotting.plot.Plot&gt;\n\n\nback to top"
  },
  {
    "objectID": "07_others/plotting.html#seaborn",
    "href": "07_others/plotting.html#seaborn",
    "title": "Plotting",
    "section": "Seaborn",
    "text": "Seaborn\nFirst create a dataFrame with a continuous variable and a categorical variable to group the histograms\n\nnp.random.rand()\nframe = pd.DataFrame(data=np.concatenate((np.random.rand(10,1),np.random.randint(0, high=2, size=(10,1))), axis=1), columns=['indep_var',\"group_var\"])\nframe[\"group_var\"] = pd.Categorical(frame[\"group_var\"].apply(lambda x: \"A\" if x else \"B\"))\n\nOr use np.random.choice to select random values in a list-type\n\nnp.random.choice(['A','B'], size=10, replace=True) #, p=None -&gt; prob_distribution\n\narray(['B', 'B', 'A', 'A', 'A', 'B', 'A', 'B', 'A', 'B'], dtype='&lt;U1')\n\n\nBarplots and Countplots from SNS\n\nfig,axs = plt.subplots(1,2, figsize=(9,3))\nsns.barplot(data=frame, y='indep_var', x=\"group_var\", ax=axs[0]).set(title=\"Indep. var. values\")\nsns.countplot(data=frame, x=\"group_var\", ax=axs[1]).set(title=\"Count in group\");\n\n\n\n\nSmall detour - categorical variables’ inner code can be accessed through:\n\nprint(frame[\"group_var\"].cat.categories)\nframe[\"group_var\"].cat.codes.values\n\nIndex(['A', 'B'], dtype='object')\n\n\narray([0, 0, 1, 0, 1, 1, 0, 1, 0, 1], dtype=int8)\n\n\nBox plot and distribution\n\nfig,axs = plt.subplots(1,2, figsize=(9,3))\nsns.boxenplot(data=frame, x=\"group_var\", y=\"indep_var\", ax=axs[0]).set(title=\"Boxplot\")\nsns.kdeplot(data=frame, x=\"indep_var\", ax=axs[1]).set(title=\"Distribution\");\n\n\n\n\nback to top"
  },
  {
    "objectID": "07_others/plotting.html#pil",
    "href": "07_others/plotting.html#pil",
    "title": "Plotting",
    "section": "PIL",
    "text": "PIL\nLoading and applying built-in filters and the kernel\n\nimg = Image.open(\"bears.jpg\").resize((400,300))#.rotate(-90)\n\nfilters = [\n    ImageFilter.BLUR,\n    ImageFilter.CONTOUR,\n    ImageFilter.DETAIL,\n    ImageFilter.EDGE_ENHANCE,\n    ImageFilter.EDGE_ENHANCE_MORE,\n    ImageFilter.EMBOSS,\n    ImageFilter.FIND_EDGES,\n    ImageFilter.Kernel(size=(3,3), kernel=[1,1,1,1,1,1,1,1,1]),\n    ImageFilter.SHARPEN,\n    ImageFilter.SMOOTH,\n    ImageFilter.SMOOTH_MORE,\n    ImageFilter.MaxFilter(size=3),\n    ImageFilter.MinFilter(size=3)\n]\n\nimgs = [(img, 'Original')] + [(img.filter(a_filter), a_filter.name) for a_filter in filters]\nplt.figure(figsize=(10, 30))\n\nfor i, (image, label) in enumerate(imgs):\n    ax = plt.subplot((len(imgs)+1)//2, 2, i + 1)\n    plt.imshow(image)\n    plt.title(label)\n    plt.axis(\"off\")\n\n\n\n\nDrawing on the image\n\nDrawer = ImageDraw.Draw(img)\nDrawer.rectangle((245,130,320,190), fill=None, outline=\"red\", width=3)\nDrawer.rectangle((205,80,290,155), fill=None, outline=\"blue\", width=3)\nimg\n\n\n\n\nback to top"
  },
  {
    "objectID": "00_DesignPatterns/plugin.html",
    "href": "00_DesignPatterns/plugin.html",
    "title": "Plugin design pattern",
    "section": "",
    "text": "The simple example runs as a farm that loads “animal” objects with method do. A JSON file contains a plug-in list, used for loading modules, and a list of objects to be created with name_of_type attribute relating to a class in the loaded plug-in.\nThis allows the code to be extended for new “animals” without any change. The protocol uncouples the original implementations for “animal” from newer ones, as long as the protocol is kept the same.\n\nFiles in this example:\n\n\nfactory.py\nplugingIn.py\nfarmAnimal.py\ntraditionalAnimals.py\nconfig.json"
  },
  {
    "objectID": "00_DesignPatterns/plugin.html#example-description",
    "href": "00_DesignPatterns/plugin.html#example-description",
    "title": "Plugin design pattern",
    "section": "",
    "text": "The simple example runs as a farm that loads “animal” objects with method do. A JSON file contains a plug-in list, used for loading modules, and a list of objects to be created with name_of_type attribute relating to a class in the loaded plug-in.\nThis allows the code to be extended for new “animals” without any change. The protocol uncouples the original implementations for “animal” from newer ones, as long as the protocol is kept the same.\n\nFiles in this example:\n\n\nfactory.py\nplugingIn.py\nfarmAnimal.py\ntraditionalAnimals.py\nconfig.json"
  },
  {
    "objectID": "00_DesignPatterns/plugin.html#running-test",
    "href": "00_DesignPatterns/plugin.html#running-test",
    "title": "Plugin design pattern",
    "section": "Running test",
    "text": "Running test\nThe list of modules only includes traditionalAnimals, which contains cow, chicken, and sheep. They only differ in default values and printed message.\nThe list of objects to create is: &gt;1. A cow without passing parameters; &gt;2. A duck with parameters; &gt;3. A sheep with parameters; &gt;4. A inexisting class with parameter {\"name\":\"bleh\"}; &gt;5. A inexisting class without parameters.\n\n\nimport json\nimport sys\nutilPath = './plugin_utils'\nsys.path.append(utilPath)\n\nimport plugingIn\nimport factory\n\n\nwith open(utilPath+'/config.json') as f:\n    data = json.load(f)\n\n    plugingIn.load_register(data['modules'])\n\n    farm = [factory.makeFromJson(**animal_stats) for animal_stats in data['animals']]\n\n    for animal in farm:\n        animal.do()\n\nBrumhilda the cow goes moo with 10 liters of milk per day\nGertrude the cow goes moo with 8 liters of milk per day\nMs.Clucks the chicken goes cluck with 50 eggs per day\nCheap the sheep goes beh with 999 grams of whool per day\nI am bleh the platypus!! Kneel befor me!\nI am Plato the platypus!! Kneel befor me!"
  },
  {
    "objectID": "00_DesignPatterns/plugin.html#factory.py",
    "href": "00_DesignPatterns/plugin.html#factory.py",
    "title": "Plugin design pattern",
    "section": "factory.py",
    "text": "factory.py\nContains some “factory” behaviour functions. &gt; - Maintains a list of classes; &gt; - Inserts new items on the list; &gt; - Instantiates from list with arguments.\nAlso contains a default class platypus.\n\n\nCode(\"./plugin_utils/factory.py\")\n\nfrom dataclasses import dataclass\nfrom farmAnimal import farmAnimal\n\n\n\nfarmAnimal_type_list: 'dict[str, callable[..., farmAnimal]]' = {}\n\n\n\ndef makeFromJson(**args: 'dict[str,any]'):\n    args_ = args.copy()\n    name_of_type = args_.pop('name_of_type','platypus')\n    return makeAnimal(name_of_type=name_of_type, args=args_)\n\n\n\ndef makeAnimal(args: 'dict[str,any]', name_of_type: str = \"platypus\"):\n    '''instantiate animal from registered class with arguments'''\n\n    builder = farmAnimal_type_list.get(name_of_type, platypus)\n    return builder(**args)\n\n\n\ndef registerAnimal(type_name: str, builder: 'callable[...,farmAnimal]'):\n    '''register class by name'''\n\n    farmAnimal_type_list[type_name] = builder\n\n\n\n@dataclass\nclass platypus():\n    '''Default random animal that follows the farmAnimal Protocol'''\n\n    name: str = 'Plato'\n\n    def do(self) -&gt; None:\n        print(f\"I am {self.name} the platypus!! Kneel befor me!\")\n\n\n\nback to top"
  },
  {
    "objectID": "00_DesignPatterns/plugin.html#plugingin.py",
    "href": "00_DesignPatterns/plugin.html#plugingin.py",
    "title": "Plugin design pattern",
    "section": "plugingIn.py",
    "text": "plugingIn.py\nImplements plug-in loading. &gt; - Defines an interface for modules with the register method; &gt; - Loads module from name: str; &gt; - Calls the register method on the module.\n\n\nCode(\"./plugin_utils/plugingIn.py\")\n\nimport importlib\nimport factory\nfrom typing import Protocol\n\n\nclass moduleInterface(Protocol):\n    def register() -&gt; None:\n        '''Register classes in module'''\n\ndef load(name: str) -&gt; moduleInterface:\n    '''loads the plugins'''\n\n    return importlib.import_module(name)\n\ndef load_register(plugin_names: 'list[str]') -&gt; None:\n    '''for each plug-in name, load and register in factory'''\n\n    for name in plugin_names:\n        plugin = load(name)\n        plugin.register()\n\n\n\nback to top"
  },
  {
    "objectID": "00_DesignPatterns/plugin.html#farmanimal.py",
    "href": "00_DesignPatterns/plugin.html#farmanimal.py",
    "title": "Plugin design pattern",
    "section": "farmAnimal.py",
    "text": "farmAnimal.py\nDefines a protocol for classes to be used in the program. &gt; - Defines class protocol with do method.\n\n\nCode(\"./plugin_utils/farmAnimal.py\")\n\nfrom typing import Protocol\n\nclass farmAnimal(Protocol):\n    '''A farm animal'''\n\n    def do(self) -&gt; None:\n        '''A farm animal does ???'''\n\n\n\nback to top"
  },
  {
    "objectID": "00_DesignPatterns/plugin.html#traditionalanimals.py",
    "href": "00_DesignPatterns/plugin.html#traditionalanimals.py",
    "title": "Plugin design pattern",
    "section": "traditionalAnimals.py",
    "text": "traditionalAnimals.py\nImplements a plug-in. &gt; - Contains classes that follow the farmAnimal protocol; &gt; - Contains register method.\n\n\nCode(\"./plugin_utils/traditionalAnimals.py\")\n\nimport factory\nfrom dataclasses import dataclass\n\n\n@dataclass\nclass chicken():\n\n    name: str = \"Suzy\"\n    eggs_per_day: str = '10'\n\n    def do(self) -&gt; None:\n        print(f\"{self.name} the chicken goes cluck with {self.eggs_per_day} eggs per day\")\n\n\n\n@dataclass\nclass cow():\n\n    name: str = \"Brumhilda\"\n    milk_per_day: str = '10'\n\n    def do(self) -&gt; None:\n        print(f\"{self.name} the cow goes moo with {self.milk_per_day} liters of milk per day\")\n\n\n\n@dataclass\nclass sheep():\n\n    name: str = \"Poly\"\n    whool_per_day: str = '100'\n\n    def do(self) -&gt; None:\n        print(f\"{self.name} the sheep goes beh with {self.whool_per_day} grams of whool per day\")\n\n\n\ndef register() -&gt; None:\n    factory.registerAnimal('cow', cow)\n    factory.registerAnimal('chicken', chicken)\n    factory.registerAnimal('sheep', sheep)\n\n\n\nback to top"
  },
  {
    "objectID": "00_DesignPatterns/plugin.html#config.json",
    "href": "00_DesignPatterns/plugin.html#config.json",
    "title": "Plugin design pattern",
    "section": "config.json",
    "text": "config.json\nData and modules to be loaded. &gt; - Contains list of modules do be dynamically loaded; &gt; - Contains list of objects to be created.\n\n\nCode(\"./plugin_utils/config.json\")\n\n{\n    \"modules\": [\"traditionalAnimals\"],\n\n    \"animals\": [\n        {\n            \"name_of_type\":\"cow\"\n        },\n        {\n            \"name_of_type\":\"cow\",\n            \"name\":\"Gertrude\",\n            \"milk_per_day\":\"8\"\n        },\n        {\n            \"name_of_type\":\"chicken\",\n            \"name\":\"Ms.Clucks\",\n            \"eggs_per_day\":\"50\"\n        },\n        {\n            \"name_of_type\":\"sheep\",\n            \"name\":\"Cheap\",\n            \"whool_per_day\":\"999\"\n        },\n        {\n            \"name_of_type\":\"bleh\",\n            \"name\":\"bleh\"\n        },\n        {\n            \"name_of_type\":\"blah\"\n        }\n    ]\n}\n\n\n\nback to top"
  },
  {
    "objectID": "00_DesignPatterns/plugin.html#conclusion",
    "href": "00_DesignPatterns/plugin.html#conclusion",
    "title": "Plugin design pattern",
    "section": "Conclusion:",
    "text": "Conclusion:\nThe interface decoupling is the main feature behind most of the design patterns. Some can be summarized as:\n\nAdapter -&gt; Interface intermidiary to connect UI to object with different interface\nComposite -&gt; Use a dsitributor object with same interface as real worker to divide tasks\nBridge -&gt; An interface between two connected parts of a system\nFlyweight -&gt; Delegation + dependency injection or dependency inversion through interfaces\nProxy -&gt; A gateway with same interface to control access.\nFacade -&gt; A gateway with simplified interface.\nDecorator -&gt; A gateway with improved interface.\nChain of responsability -&gt; With same interface to handle tasks, objects pass requests in chain.\nCommand -&gt; Disconnect client-server with a command object (one-sided).\nMediator -&gt; Disconnect objects with a mediator object.\nObserver -&gt; Disconnect client-server with a command object (one-to-many).\nStrategy -&gt; One interface, multiple implementations, an adapter in the middle.\nVisitor -&gt; A mess of entanglements of classes. Not really sure whats the point.\nState -&gt; Dependency inversion. The states objects are responsible for the variable behaviour.\n\nIt is much easier to maintain documentation with nbdev."
  },
  {
    "objectID": "03_pandas/pandas.html#creating-from-numpy",
    "href": "03_pandas/pandas.html#creating-from-numpy",
    "title": "Pandas",
    "section": "Creating from numpy",
    "text": "Creating from numpy\n\nn = 3\ndf = pd.DataFrame(data=np.arange(0,n**2,1,dtype=np.int16).reshape((n,n)))#, columns=[\"a\",\"b\",\"c\"])\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n4\n5\n\n\n2\n6\n7\n8\n\n\n\n\n\n\n\nback to top"
  },
  {
    "objectID": "03_pandas/pandas.html#indexing-on-operations",
    "href": "03_pandas/pandas.html#indexing-on-operations",
    "title": "Pandas",
    "section": "Indexing on operations",
    "text": "Indexing on operations\n\nn = 3\ndf2 = pd.DataFrame(data=np.arange(0,n**2,1,dtype=np.int16).reshape((n,n)), columns=[1,3,0], index=[2,0,1])\ndf2\n\n\n\n\n\n\n\n\n1\n3\n0\n\n\n\n\n2\n0\n1\n2\n\n\n0\n3\n4\n5\n\n\n1\n6\n7\n8\n\n\n\n\n\n\n\nPandas method reindex selects existing indexes/columns and fills non-existing ones\n\ndf2 = df2.reindex(columns=[0,1,2,3], index=[0,1,2,3], fill_value=0)\ndf2\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n5\n3\n0\n4\n\n\n1\n8\n6\n0\n7\n\n\n2\n2\n0\n0\n1\n\n\n3\n0\n0\n0\n0\n\n\n\n\n\n\n\nOperations without elements on both df are filled with NaN\n\ndf + df2\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n5.0\n4.0\n2.0\nNaN\n\n\n1\n11.0\n10.0\n5.0\nNaN\n\n\n2\n8.0\n7.0\n8.0\nNaN\n\n\n3\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n\n\n\nBy using pandas method add we can choose how to fill in these situations.\nOther operators:\n\nradd\nsub, rsub\ndiv, rdiv\nfloordiv, rfloordiv\nmul, rmul\npow, rpow\n\n\ndf.add(df2, fill_value=1)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n5.0\n4.0\n2.0\n5.0\n\n\n1\n11.0\n10.0\n5.0\n8.0\n\n\n2\n8.0\n7.0\n8.0\n2.0\n\n\n3\n1.0\n1.0\n1.0\n1.0\n\n\n\n\n\n\n\nBroadcasting in DataFrames requires the additional information of matching axis, if not by rows.\n\ndf\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0\n1\n2\n\n\n1\n3\n4\n5\n\n\n2\n6\n7\n8\n\n\n\n\n\n\n\n\ndf.divide(df[1], axis='index')\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n0.000000\n1.0\n2.000000\n\n\n1\n0.750000\n1.0\n1.250000\n\n\n2\n0.857143\n1.0\n1.142857\n\n\n\n\n\n\n\nThe opposite is true for apply, where you would select columns to have the summation happen through the columns\n\ndf.apply(sum, axis=\"columns\")\n\n0     3\n1    12\n2    21\ndtype: int64\n\n\nAnd can also return series. Probably how describe and info work\n\ndf.apply(lambda x: pd.Series([x.min(), x.max()], index=[\"min\", \"max\"]))\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\nmin\n0\n1\n2\n\n\nmax\n6\n7\n8\n\n\n\n\n\n\n\nElement wise “apply” for DataFrames is called applymap. Equivalent to map in Series\n\ndf.cov()\n\n\n\n\n\n\n\n\n0\n1\n2\n\n\n\n\n0\n9.0\n9.0\n9.0\n\n\n1\n9.0\n9.0\n9.0\n\n\n2\n9.0\n9.0\n9.0\n\n\n\n\n\n\n\nback to top"
  },
  {
    "objectID": "03_pandas/pandas.html#categorical-type",
    "href": "03_pandas/pandas.html#categorical-type",
    "title": "Pandas",
    "section": "Categorical type",
    "text": "Categorical type\nCreating from cut\n\nnums = np.random.randint(0,9,20, dtype = np.int8)\nbins = range(0,10,2)\n\ncat_var = pd.cut(nums, bins)\ncat_var\n\n[(2, 4], (2, 4], (4, 6], (2, 4], (6, 8], ..., (6, 8], (2, 4], (0, 2], (6, 8], (6, 8]]\nLength: 20\nCategories (4, interval[int64, right]): [(0, 2] &lt; (2, 4] &lt; (4, 6] &lt; (6, 8]]\n\n\n\ncat_var.categories\n\nIntervalIndex([(0, 2], (2, 4], (4, 6], (6, 8]], dtype='interval[int64, right]')\n\n\n\ncat_var.codes\n\narray([1, 1, 2, 1, 3, 0, 3, 2, 2, 3, 3, 2, 2, 3, 2, 3, 1, 0, 3, 3],\n      dtype=int8)\n\n\n\ncat_var == cat_var.categories[cat_var.codes]\n\narray([ True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True])\n\n\nback to top\n\nHistogram\n\ndf.loc[:,2].hist()\n\n&lt;AxesSubplot:&gt;\n\n\n\n\n\nback to top"
  },
  {
    "objectID": "02_Numpy/numpy.html#range-and-reshaping",
    "href": "02_Numpy/numpy.html#range-and-reshaping",
    "title": "Numpy basics",
    "section": "Range and reshaping",
    "text": "Range and reshaping\nNumpy’s range\n\nvec = np.arange(0,9,1,dtype=np.int16)\nvec\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8], dtype=int16)\n\n\nReshaping\n\nvec.reshape((3,3))\n\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]], dtype=int16)\n\n\nSidenote on shuffling with np.random.permutation\n\nnp.random.seed(42)\nnp.random.permutation(vec)\n\narray([7, 1, 5, 0, 8, 2, 4, 3, 6], dtype=int16)\n\n\nFlattening from multiple dimensions\n\nvec = np.arange(0,27, dtype=np.int8).reshape((3,3,3))\nvec\n\narray([[[ 0,  1,  2],\n        [ 3,  4,  5],\n        [ 6,  7,  8]],\n\n       [[ 9, 10, 11],\n        [12, 13, 14],\n        [15, 16, 17]],\n\n       [[18, 19, 20],\n        [21, 22, 23],\n        [24, 25, 26]]], dtype=int8)\n\n\n\nvec.reshape(3,-1)\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8],\n       [ 9, 10, 11, 12, 13, 14, 15, 16, 17],\n       [18, 19, 20, 21, 22, 23, 24, 25, 26]], dtype=int8)\n\n\n\nvec.reshape(-1,3).T\n\narray([[ 0,  3,  6,  9, 12, 15, 18, 21, 24],\n       [ 1,  4,  7, 10, 13, 16, 19, 22, 25],\n       [ 2,  5,  8, 11, 14, 17, 20, 23, 26]], dtype=int8)\n\n\nback to top"
  },
  {
    "objectID": "02_Numpy/numpy.html#linear-operations-and-randomzeros-initialization",
    "href": "02_Numpy/numpy.html#linear-operations-and-randomzeros-initialization",
    "title": "Numpy basics",
    "section": "Linear operations and random/zeros initialization",
    "text": "Linear operations and random/zeros initialization\n\nW = np.random.randn(3,2)* 0.01\nb = np.zeros((3,1))\nX = np.array([[1,2],[3,6]])\n\nY = np.dot(W,X)+b\nY\n\narray([[ 0.03310587,  0.06621174],\n       [-0.02156388, -0.04312775],\n       [-0.03343629, -0.06687257]])\n\n\nback to top"
  },
  {
    "objectID": "02_Numpy/numpy.html#broadcasting-operations",
    "href": "02_Numpy/numpy.html#broadcasting-operations",
    "title": "Numpy basics",
    "section": "Broadcasting operations",
    "text": "Broadcasting operations\nOperations with differing dimensions causes boradcasting of existing values to empty dimensions\n\nprint(f'{X = }')\nD = np.array([1,2])\nprint(f'{D = }')\nprint('\\nX/D =\\n',np.divide(X,D))\n\nX = array([[1, 2],\n       [3, 6]])\nD = array([1, 2])\n\nX/D =\n [[1. 1.]\n [3. 3.]]\n\n\n\nnp.linalg.norm(D)\n\n2.23606797749979\n\n\nFor a matrix np.linalg.norm performs the Frobenius norm \\(||X||_{F}\\)\n\nnp.linalg.norm(X)\n\n7.0710678118654755"
  },
  {
    "objectID": "02_Numpy/numpy.html#aggregation-and-output-dimension",
    "href": "02_Numpy/numpy.html#aggregation-and-output-dimension",
    "title": "Numpy basics",
    "section": "Aggregation and output dimension",
    "text": "Aggregation and output dimension\nnumpy.sum and other aggregation methods use rows as default axis\n\nprint(f'{X=}')\nprint('axis=1 and keepdims=True')\nprint(np.sum(X, axis=1, keepdims=True))\nprint('axis=1 and keepdims=False')\nprint(np.sum(X, axis=1, keepdims=False))\nprint('axis=0 and keepdims=True')\nprint(np.sum(X, axis=0, keepdims=True))\n\nX=array([[1, 2],\n       [3, 6]])\naxis=1 and keepdims=True\n[[3]\n [9]]\naxis=1 and keepdims=False\n[3 9]\naxis=0 and keepdims=True\n[[4 8]]\n\n\nUse numpy.squeeze to remove dimensions of size 1\n\nnp.squeeze(np.sum(X, axis=0, keepdims=True))\n\narray([4, 8])\n\n\nback to top"
  },
  {
    "objectID": "08_GUI/tk.html",
    "href": "08_GUI/tk.html",
    "title": "TkInter",
    "section": "",
    "text": "A simple GUI that just enters lines of text related to the activated widget.\n\nclass myApp(tk.Tk):\n    def __init__(self) -&gt; None:\n        super().__init__()\n        self.title(\"Title of App\") \n        self.geometry(\"450x400+450+150\")\n        self.create_ui()\n        \n    def create_ui(self) -&gt; None:\n        # menu\n        menubar = tk.Menu(self)\n        self.config(menu=menubar)\n        \n        # submenus cascading\n        file_menu = tk.Menu(menubar)\n        file_menu.add_command(label=\"test\", command=partial(self.a_comm, text_content=\"File menu\"))\n        \n        conf_menu = tk.Menu(menubar)\n        conf_menu.add_command(label=\"test\", command=partial(self.a_comm, text_content=\"Config menu\"))\n        \n        menubar.add_cascade(label='File', menu=file_menu)\n        menubar.add_cascade(label='Config', menu=conf_menu)\n        \n        # frame\n        frame = ttk.Frame(self)\n        frame.pack(fill=tk.BOTH, expand=1)\n        \n        # button\n        test_button = ttk.Button(frame, text=\"Test\", command=partial(self.a_comm, text_content=\"Button\"))\n        test_button.pack(anchor=\"e\", padx=5, pady=5)\n        \n        # text\n        self.text = tk.Text(frame)\n        self.text.pack(fill=tk.BOTH, expand=1)\n        \n        if messagebox.askquestion(\"Title\", \"Yes or No?\", icon=\"warning\",) == \"yes\":\n            self.a_comm(\"YES!!\")\n        else:\n            self.a_comm(\"NO MAN!! \"*3)\n            \n    def a_comm(self, text_content: str) -&gt; None:\n        self.text.insert(tk.END, text_content+\"\\n\")\n\nThen run the app\n\napp = myApp()\napp.mainloop()"
  },
  {
    "objectID": "08_GUI/tk.html#testing-tkinter",
    "href": "08_GUI/tk.html#testing-tkinter",
    "title": "TkInter",
    "section": "",
    "text": "A simple GUI that just enters lines of text related to the activated widget.\n\nclass myApp(tk.Tk):\n    def __init__(self) -&gt; None:\n        super().__init__()\n        self.title(\"Title of App\") \n        self.geometry(\"450x400+450+150\")\n        self.create_ui()\n        \n    def create_ui(self) -&gt; None:\n        # menu\n        menubar = tk.Menu(self)\n        self.config(menu=menubar)\n        \n        # submenus cascading\n        file_menu = tk.Menu(menubar)\n        file_menu.add_command(label=\"test\", command=partial(self.a_comm, text_content=\"File menu\"))\n        \n        conf_menu = tk.Menu(menubar)\n        conf_menu.add_command(label=\"test\", command=partial(self.a_comm, text_content=\"Config menu\"))\n        \n        menubar.add_cascade(label='File', menu=file_menu)\n        menubar.add_cascade(label='Config', menu=conf_menu)\n        \n        # frame\n        frame = ttk.Frame(self)\n        frame.pack(fill=tk.BOTH, expand=1)\n        \n        # button\n        test_button = ttk.Button(frame, text=\"Test\", command=partial(self.a_comm, text_content=\"Button\"))\n        test_button.pack(anchor=\"e\", padx=5, pady=5)\n        \n        # text\n        self.text = tk.Text(frame)\n        self.text.pack(fill=tk.BOTH, expand=1)\n        \n        if messagebox.askquestion(\"Title\", \"Yes or No?\", icon=\"warning\",) == \"yes\":\n            self.a_comm(\"YES!!\")\n        else:\n            self.a_comm(\"NO MAN!! \"*3)\n            \n    def a_comm(self, text_content: str) -&gt; None:\n        self.text.insert(tk.END, text_content+\"\\n\")\n\nThen run the app\n\napp = myApp()\napp.mainloop()"
  },
  {
    "objectID": "09_scraping/scraping.html#beautifulsoup",
    "href": "09_scraping/scraping.html#beautifulsoup",
    "title": "Scraping",
    "section": "BeautifulSoup",
    "text": "BeautifulSoup\n\nPopular package for scraping html.\n\n!pip install beautifulsoup4\nAttributes to change in search\n\nclass query():\n    def __init__(self) -&gt; None:\n        self.search_param = dict([x.split('=') for x in 'searchType=SALE&locationIdentifier=REGION%5E93941&insId=1&radius=0.0&minPrice=&maxPrice=&minBedrooms=&maxBedrooms=&displayPropertyType=&maxDaysSinceAdded=&_includeSSTC=on&sortByPriceDescending=&primaryDisplayPropertyType=&secondaryDisplayPropertyType=&oldDisplayPropertyType=&oldPrimaryDisplayPropertyType=&newHome=&auction=false'.split('&')])\n        self.__repr__ = self.__str__\n        \n    def __str__(self) -&gt; str:\n        return \"&\".join(map(lambda x: x[0]+'='+x[1], self.search_param.items()))\n\nstr(query())\n\n'searchType=SALE&locationIdentifier=REGION%5E93941&insId=1&radius=0.0&minPrice=&maxPrice=&minBedrooms=&maxBedrooms=&displayPropertyType=&maxDaysSinceAdded=&_includeSSTC=on&sortByPriceDescending=&primaryDisplayPropertyType=&secondaryDisplayPropertyType=&oldDisplayPropertyType=&oldPrimaryDisplayPropertyType=&newHome=&auction=false'\n\n\n\nresponse = requests.get(\"https://www.rightmove.co.uk/property-for-sale/find.html?\"+query().__str__())\n\npage = BeautifulSoup(response.text, 'html.parser')\nprices = page.findAll('div', attrs={'class':'propertyCard-priceValue'})\naddrs = page.findAll('address', attrs={'class':\"propertyCard-address property-card-updates\", 'itemprop':\"address\"})\n\nprices[0].getText().strip()\nlen(addrs)\n\n0\n\n\nback to top"
  },
  {
    "objectID": "05_torch/torch.html",
    "href": "05_torch/torch.html",
    "title": "Torch",
    "section": "",
    "text": "Testing Torch\n\ntorch.manual_seed(42)\ntorch.rand(12)\n\ntensor([0.8823, 0.9150, 0.3829, 0.9593, 0.3904, 0.6009, 0.2566, 0.7936, 0.9408,\n        0.1332, 0.9346, 0.5936])"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CodeNotes",
    "section": "",
    "text": "This is a compilation of a few snippets that I find useful for using different libs or not so daily-base code. It allowed me to practice while testing the caveats of each lib/property of python and coding in general."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "CodeNotes",
    "section": "Install",
    "text": "Install\nnot supposed to be used as a lib"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "CodeNotes",
    "section": "How to use",
    "text": "How to use\nThe idea here is to find some code snippet with some explanation for every ocasion on a single place."
  },
  {
    "objectID": "index.html#to-do",
    "href": "index.html#to-do",
    "title": "CodeNotes",
    "section": "TO DO",
    "text": "TO DO\n\nDo it as a single project development case (maybe a game?);\nInclude tests for each component of the project;\nImprove layout."
  },
  {
    "objectID": "06_fastai/fastai.html",
    "href": "06_fastai/fastai.html",
    "title": "fastai",
    "section": "",
    "text": "Testing fastai"
  },
  {
    "objectID": "04_scikit/mfa_tests.html",
    "href": "04_scikit/mfa_tests.html",
    "title": "PCA",
    "section": "",
    "text": "C = [1,4,2,2,4,2]\ndf = pd.DataFrame({'A':[1,2,3,4,5,6], 'B':[1,3,5,5,3,1], 'C1':C, 'C2':C})\n\n\ndf\n\n\n\n\n\n\n\n\nA\nB\nC1\nC2\n\n\n\n\n0\n1\n1\n1\n1\n\n\n1\n2\n3\n4\n4\n\n\n2\n3\n5\n2\n2\n\n\n3\n4\n5\n2\n2\n\n\n4\n5\n3\n4\n4\n\n\n5\n6\n1\n2\n2\n\n\n\n\n\n\n\n\nzero_mean = df - df.mean()\nnp.linalg.eig(zero_mean.cov())\n\n(array([2.25783424, 4.13294994, 3.30921583, 0.        ]),\n array([[ 4.38595999e-01, -6.90751652e-01, -5.74887558e-01,\n         -4.06759704e-18],\n        [ 4.62601343e-01, -3.74906474e-01,  8.03396000e-01,\n         -1.14581450e-16],\n        [-5.44808933e-01, -4.37211213e-01,  1.09679448e-01,\n         -7.07106781e-01],\n        [-5.44808933e-01, -4.37211213e-01,  1.09679448e-01,\n          7.07106781e-01]]))\n\n\n\n#not timed\npca = PCA(n_components=4)\n\n\npca.fit(zero_mean)\npca.components_\n\n2.61 ms ± 400 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\n\n\nprint(pca.explained_variance_, pca.singular_values_, sep='\\n')\n\n[4.13294994e+00 3.30921583e+00 2.25783424e+00 7.51030182e-33]\n[4.54584972e+00 4.06768720e+00 3.35993619e+00 1.93782118e-16]\nCPU times: total: 0 ns\nWall time: 0 ns\n\n\n\nnp.matmul(zero_mean.corr(), pca.components_.T)/pca.singular_values_\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\nA\n-0.193928\n0.129562\n-0.059770\n-0.193283\n\n\nB\n-0.117592\n-0.207353\n-0.078473\n-0.607407\n\n\nC1\n-0.240572\n-0.059146\n0.270675\n-0.572923\n\n\nC2\n-0.240572\n-0.059146\n0.270675\n-0.572923\n\n\n\n\n\n\n\n\npd.DataFrame(pca.components_.T)\n\n\n\n\n\n\n\n\n0\n1\n2\n3\n\n\n\n\n0\n-0.690752\n0.574888\n-0.438596\n0.000000e+00\n\n\n1\n-0.374906\n-0.803396\n-0.462601\n-1.110223e-16\n\n\n2\n-0.437211\n-0.109679\n0.544809\n-7.071068e-01\n\n\n3\n-0.437211\n-0.109679\n0.544809\n7.071068e-01\n\n\n\n\n\n\n\n\ni=0\n#np.dot(np.matmul(zero_mean.corr(), np.transpose(pca.components_[i][:,np.newaxis])), pca.components_[i])/pca.explained_variance_[i]\n\n\nproj = []\nfor i in range(4):\n    proj.append(np.outer(np.dot((df - np.mean(df,axis=0)).to_numpy(), pca.components_[i]),pca.components_[i][:,np.newaxis]))\n\n\n[np.linalg.norm(p) for p in proj]\n\n[4.5458497197998735,\n 4.067687196947729,\n 3.3599361887962864,\n 6.544668208791957e-16]\n\n\n\ntrial_df = pd.concat([df,df,df,df,df,df,df,df], ignore_index=True)\n\n\ntrial_df['B'].value_counts()\n\n1    16\n3    16\n5    16\nName: B, dtype: int64\n\n\n\nTrials on LearningCurveDisplay\n\nX_train, X_test, y_train, y_test = train_test_split(trial_df.drop(columns=['B']), trial_df['B'], test_size=0.5, random_state=42, stratify= trial_df['B'])\ntree = DecisionTreeClassifier(random_state=42)\nLearningCurveDisplay.from_estimator(tree, X_train, y_train, train_sizes=np.linspace(0.1, 1.0, 16))\nplt.show()\n\n\n\n\nCPU times: total: 938 ms\nWall time: 1.27 s"
  }
]